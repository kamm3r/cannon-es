---
import type { MarkdownHeading } from 'astro';

type Props = {
  headings: MarkdownHeading[];
  title: string;
};

let { headings, title } = Astro.props;
headings = [{ depth: 2, slug: 'overview', text: title }, ...headings].filter(
  ({ depth }) => depth > 1 && depth < 4
);
---

<h2
  class="mb-4 text-lg font-semibold text-gray-900 dark:text-gray-50"
  id="toc-heading"
>
  On this page
</h2>
<menu class="mb-4 marker:text-gray-300">
  {
    headings.map((heading) => {
      const { depth, slug, text } = heading;

      return (
        <li
          class:list={[
            'border-l-2 border-gray-300/20 p-1 text-sm transition-colors duration-300 hover:border-gray-300/50',
            depth === 2 ? 'pl-2' : 'pl-4',
          ]}
        >
          <a
            class="text-gray-800 hover:text-gray-400 hover:underline dark:text-gray-200 dark:hover:text-gray-100"
            href={`#${slug}`}
          >
            {text}
          </a>
        </li>
      );
    })
  }
</menu>

<script is:inline>
  // Toggle classes when items are in view
  document.querySelectorAll('article :is(h1,h2,h3)').forEach((h) => {
    new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          // have to do "All" here cause we render this component in pageContent for mobile too
          const tocItem = Array.from(
            document.querySelectorAll(`a[href="#${id}"]`)
          ).at(-1);
          // this occurs when the id = "toc-heading"
          if (!tocItem) return;

          if (entry.isIntersecting) {
            // get current all active elements
            const currentActiveElements = Array.from(
              document.querySelectorAll(
                `[data-current-active-tab-content-item="true"]`
              )
            );

            // get current all parent active elements
            const currentActiveParentElements = Array.from(
              document.querySelectorAll(
                `[data-current-active-parent-tab-content-item="true"]`
              )
            );

            // if has active elements
            if (currentActiveElements.length) {
              // loop through all elements and remove class and attr
              for (const el of currentActiveElements) {
                el.classList.remove(
                  'font-medium',
                  'bg-gray-300/20',
                  'text-gray-700',
                  'dark:text-gray-100'
                );
                el.removeAttribute('data-current-active-tab-content-item');
              }
            }
            // if has active parent elements
            if (currentActiveParentElements.length) {
              // loop through all parent elements and remove class and attr
              for (const parentEl of currentActiveParentElements) {
                parentEl.classList.remove(
                  'dark:bg-gray-300/20',
                  'bg-gray-300/30',
                  'border-gray-300/100'
                );
                parentEl.removeAttribute(
                  'data-current-active-parent-tab-content-item'
                );
              }
            }

            tocItem.classList.add(
              'font-medium',
              'text-gray-700',
              'dark:text-gray-100'
            );
            tocItem.parentElement.classList.add(
              'border-gray-300/100',
              'dark:bg-gray-300/20',
              'bg-gray-300/30'
            );
            // set data attr to active element also will helpful when need to remove active state
            tocItem.setAttribute('data-current-active-tab-content-item', true);
            tocItem.parentElement.setAttribute(
              'data-current-active-parent-tab-content-item',
              true
            );
          }
        });
      },
      {
        rootMargin: '-100px 0% -66%',
        threshold: 1,
      }
    ).observe(h);
  });
</script>
